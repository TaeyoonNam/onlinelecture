# <<<<< YAML 파일 사용이유
# 1. 계층형 구성으로 설정 내용을 작성하여 properties 파일보다 중복된 내용을 줄여주며, 가독성이 좋습니다.
# 2. 멀티 모듈 환경에 properties 파일을 적용하는 경우 각각의 문서를 생성하여 설정 파일 내용을 변경해주지만,
#    YAML의 경우 문서를 나누는 기능('---')을 통해 하나의 설정 파일에서 구조화가 가능하여 보다 편리하게 관리 할 수 있습니다.
#
# <<<<< JPA 사용이유
# 1. 반복적인 CRUD SQL문을 줄일 수 있습니다.
# 2. DB 테이블로부터 의존도를 줄이며, JPA를 통해 보다 객체지향 적인 코드 작성이 가능합니다.
# 3. 영속성 컨텍스트(persist context)를 통해 DB 커넥션 리소스 낭비를 줄일 수 있습니다.
#

spring:
  config:
    activate:
      on-profile: local
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/online_lecture?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: tom_local
    password: tom_local
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    generate-ddl: true
    open-in-view: false       #  Open-In-View or Open-Session-In-View이란? 영속성 컨텍스트 트랜잭션 범위를 어디까지 지정할 것인지에 대한 설정이다. 참고(https://gracelove91.tistory.com/100, https://kingbbode.tistory.com/27)
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true

logging:
  level:
    org:
      hibernate:
        SQL: debug
        type:
          descriptor:
            sql:
              BasicBinder: trace
server:
  servlet:
    encoding:
      charset: UTF-8
      force: true